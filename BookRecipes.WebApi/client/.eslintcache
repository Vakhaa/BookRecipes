[{"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\index.js":"1","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\reportWebVitals.js":"2","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\App.js":"3","D:\\dev\\BookRecipes\\bookrecipes.webapi\\client\\src\\index.js":"4","D:\\dev\\BookRecipes\\bookrecipes.webapi\\client\\src\\components\\App.js":"5","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Footer\\Footer.js":"6","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Header\\Header.js":"7","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\IngredientsContainer.js":"8","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Ingredients\\Ingredients.js":"9","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Ingredients\\Ingredient.js":"10","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\SideBar\\SideBar.js":"11","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\RecipeContainer.js":"12","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Recipes\\Recipe.js":"13","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\RecipesContainer.js":"14","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Recipes\\Recipes.js":"15","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\SideBarContainer.js":"16","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\ProfileContainer.js":"17","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Profile\\Profile.js":"18","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Profile\\Posts\\Posts.js":"19","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\common\\Login.js":"20","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\DAL\\api.js":"21","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\ingredientAction.js":"22","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\ingredientsAction.js":"23","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\actionTypes.js":"24","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\profileAction.js":"25","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\store\\index.js":"26","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\index.js":"27","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\ingredientReducer.js":"28","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\ingredientsReducer.js":"29","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\profileReducer.js":"30","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\MessagesContainer.js":"31","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Messages.js":"32","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\messagesReducer.js":"33","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\messagesAction.js":"34","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\SideBar\\SideBar.js":"35","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\Chat.js":"36","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\ChatDisplayer\\ChatDisplayer.js":"37","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\Header\\Header.js":"38","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\MessageCreator\\MessageCreator.js":"39","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Notes\\Notes.js":"40","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\SideBar\\Friends\\Friends.js":"41","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\postsReducer.js":"42","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\postsAction.js":"43","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\profilesMock.js":"44","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\friendsAction.js":"45","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\friendsReducer.js":"46","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\informatorReducer.js":"47","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\FriendsContainer.js":"48","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Friends\\Friends.js":"49","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\hoc\\withAuthUser.js":"50","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\hoc\\withFriends.js":"51"},{"size":688,"mtime":1613770363938,"results":"52","hashOfConfig":"53"},{"size":362,"mtime":499162500000,"results":"54","hashOfConfig":"53"},{"size":2290,"mtime":1613930347598,"results":"55","hashOfConfig":"53"},{"size":484,"mtime":1610879481612,"results":"56","hashOfConfig":"57"},{"size":387,"mtime":1610829940396,"results":"58","hashOfConfig":"57"},{"size":1506,"mtime":1613666816211,"results":"59","hashOfConfig":"53"},{"size":1279,"mtime":1613669821025,"results":"60","hashOfConfig":"53"},{"size":1838,"mtime":1613938209877,"results":"61","hashOfConfig":"53"},{"size":1265,"mtime":1613669985020,"results":"62","hashOfConfig":"53"},{"size":1908,"mtime":1613669933942,"results":"63","hashOfConfig":"53"},{"size":1231,"mtime":1613897413060,"results":"64","hashOfConfig":"53"},{"size":1499,"mtime":1613938017664,"results":"65","hashOfConfig":"53"},{"size":2452,"mtime":1613670121512,"results":"66","hashOfConfig":"53"},{"size":1726,"mtime":1613569114625,"results":"67","hashOfConfig":"53"},{"size":828,"mtime":1613670211197,"results":"68","hashOfConfig":"53"},{"size":972,"mtime":1613938048198,"results":"69","hashOfConfig":"53"},{"size":1712,"mtime":1613937947400,"results":"70","hashOfConfig":"53"},{"size":5812,"mtime":1613925371239,"results":"71","hashOfConfig":"53"},{"size":2470,"mtime":1613914669086,"results":"72","hashOfConfig":"53"},{"size":2051,"mtime":1614007453279,"results":"73","hashOfConfig":"53"},{"size":1708,"mtime":1613817086659,"results":"74","hashOfConfig":"53"},{"size":913,"mtime":1611444873492,"results":"75","hashOfConfig":"53"},{"size":859,"mtime":1613814570019,"results":"76","hashOfConfig":"53"},{"size":2113,"mtime":1614008860860,"results":"77","hashOfConfig":"53"},{"size":1033,"mtime":1613913057105,"results":"78","hashOfConfig":"53"},{"size":741,"mtime":1613905241258,"results":"79","hashOfConfig":"53"},{"size":773,"mtime":1614003307704,"results":"80","hashOfConfig":"53"},{"size":925,"mtime":1613670352216,"results":"81","hashOfConfig":"53"},{"size":997,"mtime":1613670375434,"results":"82","hashOfConfig":"53"},{"size":1640,"mtime":1613914649685,"results":"83","hashOfConfig":"53"},{"size":1778,"mtime":1613938167180,"results":"84","hashOfConfig":"53"},{"size":2047,"mtime":1613899133715,"results":"85","hashOfConfig":"53"},{"size":1980,"mtime":1613847845874,"results":"86","hashOfConfig":"53"},{"size":1025,"mtime":1613847823432,"results":"87","hashOfConfig":"53"},{"size":2636,"mtime":1613899180221,"results":"88","hashOfConfig":"53"},{"size":1449,"mtime":1613851807758,"results":"89","hashOfConfig":"53"},{"size":2167,"mtime":1613846861671,"results":"90","hashOfConfig":"53"},{"size":2263,"mtime":1613843358806,"results":"91","hashOfConfig":"53"},{"size":2464,"mtime":1613848789799,"results":"92","hashOfConfig":"53"},{"size":625,"mtime":1613897134460,"results":"93","hashOfConfig":"53"},{"size":2421,"mtime":1613905068577,"results":"94","hashOfConfig":"53"},{"size":4376,"mtime":1613915828027,"results":"95","hashOfConfig":"53"},{"size":1368,"mtime":1613913402497,"results":"96","hashOfConfig":"53"},{"size":2392,"mtime":1613913827329,"results":"97","hashOfConfig":"53"},{"size":1807,"mtime":1614009030864,"results":"98","hashOfConfig":"53"},{"size":1630,"mtime":1613918807680,"results":"99","hashOfConfig":"53"},{"size":1497,"mtime":1614008918520,"results":"100","hashOfConfig":"53"},{"size":1632,"mtime":1613937927318,"results":"101","hashOfConfig":"53"},{"size":2023,"mtime":1613930095992,"results":"102","hashOfConfig":"53"},{"size":648,"mtime":1613936689762,"results":"103","hashOfConfig":"53"},{"size":1300,"mtime":1614009100975,"results":"104","hashOfConfig":"53"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"hlthki",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11vlfv1",{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"107"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"107"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"107"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"107"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"107"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"107"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"175","usedDeprecatedRules":"107"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"178","usedDeprecatedRules":"107"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"181","usedDeprecatedRules":"107"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"107"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"187","usedDeprecatedRules":"107"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"190","usedDeprecatedRules":"107"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"193","usedDeprecatedRules":"107"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"196","usedDeprecatedRules":"107"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"107"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"202","usedDeprecatedRules":"107"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"205","usedDeprecatedRules":"107"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"107"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"107"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"107"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"107"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\index.js",[],["230","231"],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\reportWebVitals.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\App.js",[],"D:\\dev\\BookRecipes\\bookrecipes.webapi\\client\\src\\index.js",["232","233"],"D:\\dev\\BookRecipes\\bookrecipes.webapi\\client\\src\\components\\App.js",["234","235"],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Footer\\Footer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Header\\Header.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\IngredientsContainer.js",["236"],"import React, {Component} from 'react'  \r\nimport { connect } from 'react-redux'\r\nimport { getIngredient } from '../Redux/actions/ingredientAction'\r\nimport { getIngredients } from '../Redux/actions/ingredientsAction'\r\nimport Ingredients from '../components/Ingredients/Ingredients'\r\n\r\nclass IngredientsContainer  extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getIngredients();\r\n        /*   this.timer = setInterval(() => this.getIngredients(), 5000);\r\n           this.timer1 = setInterval(() => this.setState({ ingredients: this.props.ingredients }), 1000);*/\r\n    }\r\n\r\n    /*componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        clearInterval(this.timer1);\r\n    }*/\r\n\r\n    /*const handleChange = (event) => {\r\n        this.setState({ value: event.target.value });\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        console.log(\"Value in handleSubmit(<Ingredients>):\")\r\n        console.log(this.state.value)\r\n        props.getIngredient(this.state.value)\r\n        event.preventDefault();\r\n\r\n    }*/\r\n    /*let timer = setInterval(() => props.getIngredients(), 10000);*/\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Ingredients\r\n                fetching={this.props.fetching}\r\n                ingredients={this.props.ingredients}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ingredients: state.ingredients.ingredients,\r\n        fetching: state.ingredients.fetching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n     return {\r\n        getIngredient: id => dispatch(getIngredient(id)),\r\n         getIngredients: () => dispatch(getIngredients())\r\n}}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IngredientsContainer)\r\n ","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Ingredients\\Ingredients.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Ingredients\\Ingredient.js",["237"],"import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Typography, Button, Tooltip } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    ingredientPhoto: {\r\n        width: 200,\r\n        height:200\r\n    }\r\n});\r\n\r\n\r\nconst Ingredient = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const CurrentInform = () => (\r\n        <div>\r\n            <span><Typography>{props.id}. {props.name}. You have {props.ingredientsInRecipe.length} recipes with this ingredients.</Typography></span>\r\n            <span><img alt={props.name} className={classes.ingredientPhoto} src=\"https://source.unsplash.com/random\" /></span>\r\n            <span>\r\n                <ul>\r\n                    {\r\n                        props.ingredientsInRecipe.map((recipe) => {\r\n                            <li key={recipe.id}>Recipe - {recipe.recipeId}. Count this ingredients - {recipe.countIngredient}</li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </span>\r\n        </div>    \r\n        )\r\n\r\n        return (\r\n            <li>\r\n                <Tooltip title={CurrentInform()} placement=\"right-start\">\r\n                    <Button><Typography>{props.name}.</Typography></Button>\r\n                </Tooltip>\r\n            </li>\r\n        )\r\n}\r\n\r\nIngredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Ingredient;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\SideBar\\SideBar.js",["238","239"],"import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport { Grid, Button, makeStyles, MenuItem, Paper, MenuList } from '@material-ui/core'\r\n\r\nlet useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        backgroundColor: theme.palette.grey[200],\r\n        width:\"100%\"\r\n    },\r\n    textNavigation: {\r\n        textDecoration: \"none\",\r\n        color: \"black\"\r\n    },\r\n    buttonNavigation: {\r\n        backgroundColor: \"#e57373\",\r\n        borderRadius: \"0 5px 5px 0\",\r\n    }\r\n}));\r\n\r\nconst SideBar = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Paper className={classes.paper}>\r\n                <MenuList>\r\n                    {props.navi.map((item) => (\r\n                        <Paper>\r\n                            <NavLink to={item.pathTo} className={classes.textNavigation}>\r\n                                <MenuItem className={classes.buttonNavigation} key={item.id}>\r\n                                    {item.name}\r\n                                </MenuItem>\r\n                            </NavLink>\r\n                        </Paper>\r\n                    ))}\r\n                </MenuList>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SideBar;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\RecipeContainer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Recipes\\Recipe.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\RecipesContainer.js",["240","241"],"import React, {Component} from 'react'  \r\nimport { connect } from 'react-redux'\r\nimport Recipes from '../components/Recipes/Recipes'\r\n\r\nconst recipesMoq = {\r\n    recipes: [\r\n        {\r\n            id: 1,\r\n            name: \"Barszcz\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Zupa\"\r\n        },\r\n    ],\r\n    fetching: false\r\n}\r\n\r\nclass RecipesContainer  extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*this.props.Recipes();*/\r\n        /*   this.timer = setInterval(() => this.getIngredients(), 5000);\r\n           this.timer1 = setInterval(() => this.setState({ ingredients: this.props.ingredients }), 1000);*/\r\n    }\r\n\r\n    /*componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n        clearInterval(this.timer1);\r\n    }*/\r\n\r\n    /*const handleChange = (event) => {\r\n        this.setState({ value: event.target.value });\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        console.log(\"Value in handleSubmit(<Ingredients>):\")\r\n        console.log(this.state.value)\r\n        props.getIngredient(this.state.value)\r\n        event.preventDefault();\r\n\r\n    }*/\r\n    /*let timer = setInterval(() => props.getIngredients(), 10000);*/\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Recipes\r\n                recipes={this.props.recipes}\r\n                fetching={this.props.fetching}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        recipes: recipesMoq.recipes,\r\n        fetching: recipesMoq.fetching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n     return {\r\n}}\r\n\r\nexport default connect(mapStateToProps, null)(RecipesContainer)\r\n ","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Recipes\\Recipes.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\SideBarContainer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\ProfileContainer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Profile\\Profile.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Profile\\Posts\\Posts.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\common\\Login.js",["242","243","244","245","246"],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\DAL\\api.js",["247"],"import * as axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"/api\",\r\n    /*headers: {\r\n        \"API-KEY\" : \"hash-kod\"\r\n    }*/\r\n})\r\n\r\nexport const ingredientsAPI = {\r\n    getIngredients() {\r\n        return instance.get(`Ingredients/Ingredients`).then(response => {\r\n            return response.data\r\n        });\r\n    },\r\n}\r\n\r\nexport const profilesAPI = {\r\n    getProfile(id) {\r\n        return instance.get(`Profile/${id}`).then(response => {\r\n            return response.data\r\n        });\r\n    },\r\n}\r\n\r\nconst profileMock = {\r\n    id: 1,\r\n    name: \"Subzero\",\r\n    photo: \"https://source.unsplash.com/random\",\r\n    status: \"So so\",\r\n    description: \"To jest najliepsze co zrobily ludzi. Aromatny zapazch, a jaki kolor, smack wymbitny.\",\r\n    socailNetworkings: [\r\n        {\r\n            id: 1,\r\n            name: \"Git Hub\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Facebook\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Telegram\"\r\n        },\r\n    ],\r\n    posts: [\r\n        {\r\n            id: 0,\r\n            title: \"Tonight I'm cooked some fine cake!\",\r\n            main: \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n            photo: \"https://source.unsplash.com/random\"\r\n        },\r\n        {\r\n            id: 1,\r\n            title: \"Some photo for you! Duddde\",\r\n            main: \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n            photo: \"https://source.unsplash.com/random\"\r\n        }\r\n    ],\r\n    newPostTitle: \"\",\r\n    newPostBody: \"\"\r\n}","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\ingredientAction.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\ingredientsAction.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\actionTypes.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\profileAction.js",["248"],"import {\n    GET_PROFILE_REQUEST,\n    GET_PROFILE_SUCCESS,\n    GET_PROFILE_ERROR,\n}\n    from './actionTypes'\n\nimport {profilesAPI} from '../../DAL/api'\n\nexport function requestProfile(id) {\n    return {\n        type: GET_PROFILE_REQUEST,\n        id: id\n    }\n}\n\n/*export function receiveProfile(item) {\n    return {\n        type: GET_PROFILE_SUCCESS,\n        profile: item\n    }\n}*/\n\nexport function receiveProfile() {\n    return {\n        type: GET_PROFILE_SUCCESS\n    }\n}\n\n\nexport function errorProfile(error) {\n    return {\n        type: GET_PROFILE_ERROR,\n        error: error\n    }\n}\n\n\n//��������� ������\nexport function getProfile(id) {\n    return (dispatch) => {\n        dispatch(requestProfile(id))\n        dispatch(receiveProfile())\n    }\n}\n\n/*export function getProfile(id) {\n    return (dispatch) => {\n        dispatch(requestProfile(id))\n\n        profilesAPI.getProfile().then(data => {\n            dispatch(receiveProfile(data))\n        }).catch(error => {\n            dispatch(errorProfile(error))\n        })\n    }\n}*/\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\store\\index.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\index.js",["249"],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\ingredientReducer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\ingredientsReducer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\profileReducer.js",["250","251"],"import {\r\n    GET_PROFILE_REQUEST,\r\n    GET_PROFILE_SUCCESS,\r\n    GET_PROFILE_ERROR,\r\n    GET_PROFILES_REQUEST,\r\n    GET_PROFILES_SUCCESS,\r\n    GET_PROFILES_ERROR,\r\n    \r\n} from '../actions/actionTypes'\r\n\r\nimport profiles from './profilesMock'\r\n\r\nconst initialState = {\r\n    currentProfileId: 0,\r\n    profile: null,\r\n    profiles: null,\r\n    fetching: false\r\n}\r\n\r\n\r\nexport default function profilesReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_PROFILE_REQUEST:\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    id: profiles.find((profile) => profile.id == action.id).id,\r\n                },\r\n                fetching: true\r\n            }\r\n        case GET_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: profiles.find((profile) => profile.id == state.profile.id),\r\n                fetching: false\r\n            }\r\n        case GET_PROFILE_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                fetching: false\r\n            }\r\n\r\n        case GET_PROFILES_REQUEST:\r\n            return {\r\n                ...state,\r\n                fetching: true\r\n            }\r\n        case GET_PROFILES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profiles: profiles,\r\n                fetching: false\r\n            }\r\n        case GET_PROFILES_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error,\r\n                fetching: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\MessagesContainer.js",["252"],"﻿import React, {Component} from 'react'  \r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport Messages from '../components/Messages/Messages'\r\nimport { addMessage, updateMessageBody } from '../Redux/actions/messagesAction'\r\n\r\nconst friendsMock = [\r\n    {\r\n        id: 0,\r\n        name: \"Kun Lao\",\r\n        newMessages: 5,\r\n        photo: \"https://source.unsplash.com/random\"\r\n    },\r\n    {\r\n        id: 1,\r\n        name: \"Subzero\",\r\n        newMessages: 0,\r\n        photo: \"https://source.unsplash.com/random\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Mortal Kombar Team\",\r\n        newMessages: 127,\r\n        photo: \"https://source.unsplash.com/random\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Scorpion\",\r\n        newMessages: 1,\r\n        photo: \"https://source.unsplash.com/random\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Raiden\",\r\n        newMessages: 0,\r\n        photo: \"https://source.unsplash.com/random\"\r\n    }\r\n]\r\n\r\n\r\nclass MessagesContainer  extends Component {\r\n\r\n    componentDidMount() {\r\n        /*this.props.getProfile(this.props.id);*/\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Messages {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        friends: friendsMock,\r\n        messages: state.messages.messages,\r\n        newMessageBody: state.messages.newMessageBody,\r\n        newSearchBody: \"\"\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateMessageBody: (text) => (dispatch(updateMessageBody(text))),\r\n        addMessage: () => (dispatch(addMessage()))\r\n}}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(MessagesContainer)\r\n ","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Messages.js",["253","254"],"﻿import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Paper} from '@material-ui/core';\r\n\r\nimport SideBar from './SideBar/SideBar';\r\nimport Chat from './Chat/Chat';\r\nimport { Route } from 'react-router-dom';\r\nimport Notes from './Notes/Notes';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: \"#e57373\",\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    notes: {\r\n        height: 60,\r\n        borderRadius: '100%',\r\n        border: 'inset'\r\n    }\r\n}));\r\n\r\nconst Messages = (props) => {\r\n    const classes = useStyles();\r\n\r\n        return (\r\n            <>\r\n                <Grid container >\r\n                    <Grid container item md={8} >\r\n                        <Route path=\"/messages\" exact>\r\n                            <Notes/>\r\n                        </Route>\r\n                        <Route path=\"/messages/chat/\"> {/*:userId*/ }\r\n                            <Chat\r\n                                messages={props.messages}\r\n                                updateMessageBody={props.updateMessageBody}\r\n                                addMessage={props.addMessage}\r\n                                newMessageBody={props.newMessageBody}\r\n                            />\r\n                        </Route>\r\n                    </Grid>\r\n                    <Grid className={classes.friendsBar} container item md={4}>\r\n                        <SideBar friends={props.friends} /> \r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\n/*Ingredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default Messages;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\messagesReducer.js",["255"],"﻿import {\r\n    ADD_MESSAGE_TO_FRIEND,\r\n    UPDATE_MESSAGE_TO_FRIEND\r\n} from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {\r\n            id: 0,\r\n            text: \"Hej, jak dzisiaj siebie czujesz ?\",\r\n            isMe: false,\r\n            isChange: false,\r\n            dataCreated: {\r\n                data: \"20.02.2021\",\r\n                time: \"20:32\"\r\n            }\r\n        },\r\n        {\r\n            id: 1,\r\n            text: \"Mam do Ciebe pytanie.\",\r\n            isMe: false,\r\n            isChange: false,\r\n            dataCreated: {\r\n                data: \"20.02.2021\",\r\n                time: \"20:32\"\r\n            }\r\n        },\r\n        {\r\n            id: 2,\r\n            text: \"Czeszcz, Jacek. Wszystko dobrze\",\r\n            isMe: true,\r\n            isChange: true,\r\n            dataCreated: {\r\n                data: \"20.02.2021\",\r\n                time: \"20:42\"\r\n            }\r\n        },\r\n        {\r\n            id: 3,\r\n            text: \"Co się stało ?\",\r\n            isMe: true,\r\n            isChange: false,\r\n            dataCreated: {\r\n                data: \"20.02.2021\",\r\n                time: \"20:43\"\r\n            }\r\n        }\r\n    ],\r\n    newMessageBody : \"\"\r\n}\r\n\r\nexport default function messagesReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_MESSAGE_TO_FRIEND:\r\n            return {\r\n                ...state,\r\n                newMessageBody : action.text\r\n            }\r\n        case ADD_MESSAGE_TO_FRIEND:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {\r\n                    id: 4,\r\n                    text: state.newMessageBody,\r\n                    isMe: true,\r\n                    isChange: false,\r\n                    dataCreated: {\r\n                        data: \"20.02.2021\",\r\n                        time: \"20:32\"\r\n                    }\r\n                }]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\messagesAction.js",["256"],"import {\n    ADD_MESSAGE_TO_FRIEND,\n    UPDATE_MESSAGE_TO_FRIEND\n}\n    from './actionTypes'\n\nimport {profilesAPI} from '../../DAL/api'\n\n/*export function requestProfileFriend(id) {\n    return {\n        type: GET_PROFILE_REQUEST,\n        profile: id\n    }\n}*/\n\n/*export function receiveProfileFriend(item) {\n    return {\n        type: GET_PROFILE_SUCCESS,\n        profile: item\n    }\n}*/\n\nexport function addMessage() {\n    return {\n        type: ADD_MESSAGE_TO_FRIEND\n    }\n}\n\nexport function updateMessageBody(text) {\n    return {\n        type: UPDATE_MESSAGE_TO_FRIEND,\n        text: text\n    }\n}\n\n/*export function errorProfileFriend(error) {\n    return {\n        type: GET_PROFILE_ERROR,\n        error: error\n    }\n}*/\n\n//��������� ������\n\n/*export function getProfile(id) {\n    return (dispatch) => {\n        dispatch(requestProfile(id))\n\n        profilesAPI.getProfile().then(data => {\n            dispatch(receiveProfile(data))\n        }).catch(error => {\n            dispatch(errorProfile(error))\n        })\n    }\n}*/","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\SideBar\\SideBar.js",["257","258","259"],"﻿import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Button,  InputBase, Icon, MenuList, MenuItem} from '@material-ui/core';\r\n\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport Friends from './Friends/Friends';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: theme.palette.grey[500],\r\n    },\r\n    linkText: {\r\n        textDecoration: \"none\",\r\n        color : \"black\"\r\n    },\r\n    notesIcon: {\r\n        color: \"#388e3c\",\r\n    },\r\n    notesButton: {\r\n        height: 60,\r\n        borderRadius: '100%',\r\n        border: 'inset',\r\n        borderColor: \"green\"\r\n\r\n    },\r\n    friendAvatar: {\r\n        anchorOrigin: {\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n        }\r\n    },\r\n    searchInput: {\r\n        width: \"100%\",\r\n        height: \"auto\"\r\n    }\r\n}));\r\n\r\nconst SideBar= (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onPostTitle = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostTitle(text)\r\n    }\r\n\r\n    const onPostBody = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostBody(text)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <Grid direction=\"column\" container item>\r\n                    <MenuList>\r\n                        <MenuItem>\r\n                            <Grid direction=\"column\" container item alignItems=\"stretch\">\r\n                                <InputBase\r\n                                    className={'searchInput'}\r\n                                    placeholder={'Search...'}\r\n                                    startAdornment={<Icon>search</Icon>}\r\n                                />\r\n                            </Grid>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem className={classes.buttonNavigation}>\r\n                            <Grid container item>\r\n                                <NavLink to=\"/messages\" className={classes.linkText}>\r\n                                    <span>NOTES</span>\r\n                                    <Button className={classes.notesButton}>\r\n                                        <BookmarkBorderIcon className={classes.notesIcon} />\r\n                                    </Button>\r\n                                </NavLink>\r\n                            </Grid>\r\n                        </MenuItem>\r\n\r\n                        <Friends friends={props.friends} />\r\n\r\n                    </MenuList>\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SideBar;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\Chat.js",["260","261"],"﻿import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport MessageCreator from './MessageCreator/MessageCreator';\r\nimport ChatDisplayer from './ChatDisplayer/ChatDisplayer';\r\nimport Header from './Header/Header';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: theme.palette.grey[500],\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    notes: {\r\n        height: 60,\r\n        borderRadius: '100%',\r\n        border: 'inset'\r\n    }\r\n}));\r\n\r\nconst Chat = (props) => {\r\n    const classes = useStyles();\r\n\r\n\r\n        return (\r\n            <>\r\n                <Header />\r\n                <ChatDisplayer messages={props.messages} />\r\n                <MessageCreator\r\n                    updateMessageBody={props.updateMessageBody}\r\n                    addMessage={props.addMessage}\r\n                    newMessageBody={props.newMessageBody}\r\n                />\r\n            </>\r\n        )\r\n}\r\n\r\n/*Ingredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default Chat;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\ChatDisplayer\\ChatDisplayer.js",["262","263","264","265","266","267","268","269","270","271","272","273"],"﻿import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Typography, Avatar, Chip, Accordion, AccordionSummary, AccordionDetails, Button, Input, IconButton, Paper } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: theme.palette.grey[500],\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    rounded: {\r\n        width: 300,\r\n        height: 300\r\n    }\r\n}));\r\n\r\nconst ChatDisplayer = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onPostTitle = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostTitle(text)\r\n    }\r\n\r\n    const onPostBody = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostBody(text)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <Grid container item direction=\"column\">\r\n                    {\r\n                        props.messages.map((message) => (\r\n                                <Grid container item justify={message.isMe ? \"flex-end\" : \"flex-start\"}>\r\n                                {/*<Typography>{message.isChange ? \"Changed\": null}</Typography>\r\n                                    <Typography>{message.dataCreated.data} {message.dataCreated.time}</Typography>*/}\r\n                                <Paper>\r\n                                        <Typography>\r\n                                            {message.text}\r\n                                        </Typography>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            ))\r\n                    }\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\n/*Ingredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default ChatDisplayer;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\Header\\Header.js",["274","275","276","277"],"﻿import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Avatar, Chip, IconButton} from '@material-ui/core';\r\n\r\nimport LocalPhoneIcon from '@material-ui/icons/LocalPhone';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: theme.palette.grey[500],\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    rounded: {\r\n        width: 300,\r\n        height: 300\r\n    }\r\n}));\r\n\r\nconst Header = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onPostTitle = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostTitle(text)\r\n    }\r\n\r\n    const onPostBody = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostBody(text)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <Grid container item direction=\"row\" alignItems=\"baseline\">\r\n                    <Grid container item justify=\"flex-start\" md=\"6\">\r\n                        <IconButton>\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                        <IconButton>\r\n                            <VideoCallIcon />\r\n                        </IconButton>\r\n                        <IconButton>\r\n                            <LocalPhoneIcon />\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid container item justify=\"flex-end\" md=\"6\" alignItems=\"center\">\r\n                        <Chip label=\"Online\" color=\"secondary\" />\r\n                        <Avatar alt=\"Remy Sharp\" src=\"https://source.unsplash.com/random\" />\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\n/*Ingredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default Header;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Chat\\MessageCreator\\MessageCreator.js",["278"],"import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Input, IconButton, Paper } from '@material-ui/core';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: theme.palette.grey[500],\r\n    },\r\n    input: {\r\n        width: \"100%\",\r\n    },\r\n    rounded: {\r\n        width: 300,\r\n        height: 300\r\n    }\r\n}));\r\n\r\nconst MessageCreator = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onMessageBody = (e) => {\r\n        let text = e.target.value\r\n        props.updateMessageBody(text)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <Grid container>\r\n                    <Grid container item>\r\n                        <Grid container item md={11} justify=\"center\" direction=\"column\" alignItems=\"stretch\">\r\n                            <Paper elevation={3}>\r\n                                <Input className={classes.input} variant=\"outlined\"\r\n                                    placeholder=\"This is your messages\" multiline\r\n                                    disableUnderline value={props.newMessageBody} onChange={(e) => (onMessageBody(e))} />\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid container item md={1} direction=\"column\"\r\n                            direction=\"column\"\r\n                            justify=\"center\"\r\n                            alignItems=\"center\">\r\n                            <IconButton size=\"small\" color=\"primary\" aria-label=\"send\" onClick={props.addMessage}>\r\n                                <SendRoundedIcon />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid className={classes.friendsBar} container item justify=\"center\">\r\n                        tools\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\n/*Ingredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default MessageCreator;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\Notes\\Notes.js",["279","280"],"﻿import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    friendsBar: {\r\n        backgroundColor: theme.palette.grey[500],\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    notes: {\r\n        height: 60,\r\n        borderRadius: '100%',\r\n        border: 'inset'\r\n    }\r\n}));\r\n\r\nconst Notes = (props) => {\r\n    const classes = useStyles();\r\n\r\n        return (\r\n            <>\r\n                <Typography>Notes</Typography>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default Notes;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Messages\\SideBar\\Friends\\Friends.js",["281","282","283","284"],"﻿import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Typography, Avatar, Badge, MenuItem, Paper, MenuList } from '@material-ui/core';\r\n\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        /*marginRight: theme.spacing(2),*/\r\n        /*width: \"auto\"*/\r\n    },\r\n    linkText: {\r\n        textDecoration: \"none\",\r\n        color : \"black\"\r\n    },\r\n    notesIcon: {\r\n        color: \"#388e3c\",\r\n    },\r\n    notesButton: {\r\n        height: 60,\r\n        borderRadius: '100%',\r\n        border: 'inset',\r\n        borderColor: \"green\"\r\n\r\n    },\r\n    friendAvatar: {\r\n        anchorOrigin: {\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n        }\r\n    },\r\n    buttonNavigation: {\r\n        borderRadius: \"5px 0 0 5px\",\r\n    }\r\n}));\r\n\r\nconst Friends = (props) => {\r\n    const classes = useStyles();\r\n\r\n        return (\r\n            <>\r\n                {props.friends.map((friend) => (\r\n                    <NavLink to=\"/messages/chat\" className={classes.linkText}>\r\n                        <MenuItem className={classes.buttonNavigation}>\r\n                            <Badge color=\"secondary\" badgeContent={friend.newMessages}>\r\n                                <MailIcon />\r\n                            </Badge>\r\n                            <Badge>\r\n                                <Typography>{friend.name}</Typography>\r\n                            </Badge>\r\n                            <Badge>\r\n                                <Avatar alt={friend.name} src={friend.photo} />\r\n                            </Badge>\r\n                        </MenuItem>\r\n                    </NavLink>\r\n                ))}\r\n            </>\r\n        )\r\n}\r\n\r\n/*{\r\n    props.friends.map((friend) => (\r\n        <Grid container item justify=\"flex-end\">\r\n            <NavLink to=\"/messages/chat\" className={classes.linkText}>\r\n                <Badge color=\"secondary\" badgeContent={friend.newMessages}>\r\n                    <MailIcon />\r\n                </Badge>\r\n                <Badge>\r\n                    <Typography>{friend.name}</Typography>\r\n                </Badge>\r\n                <Badge>\r\n                    <Avatar alt={friend.name} src={friend.photo} />\r\n                </Badge>\r\n            </NavLink>\r\n        </Grid>\r\n    ))\r\n}*/\r\nexport default Friends;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\postsReducer.js",["285"],"import {\r\n    ADD_POST_TO_PROFILE,\r\n    UPDATE_POST_TITLE_INTO_PROFILE,\r\n    UPDATE_POST_BODY_INTO_PROFILE,\r\n    GET_USER_POSTS_REQUEST,\r\n    GET_USER_POSTS_SUCCESS,\r\n    GET_USER_POSTS_ERROR\r\n\r\n} from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    id: 0,\r\n    userId: null,\r\n    posts: [\r\n        {\r\n            id: 0,\r\n            title: \"Tonight I'm cooked some fine cake!\",\r\n            main: \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n            photo: \"https://source.unsplash.com/random\"\r\n        }\r\n    ],\r\n    newPostTitle: \"\",\r\n    newPostBody: \"\"\r\n}\r\n\r\nlet postsMock = [\r\n    {\r\n        id: 0,\r\n        userId: 0,\r\n        posts: [\r\n            {\r\n                id: 0,\r\n                title: \"Tonight I'm cooked some fine cake!\",\r\n                main: \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            },\r\n            {\r\n                id: 1,\r\n                title: \"Some photo for you! Duddde\",\r\n                main: \"Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging across all continents except Antarctica\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            }\r\n        ],\r\n        newPostTitle: \"\",\r\n        newPostBody: \"\"\r\n    },\r\n    {\r\n        id: 1,\r\n        userId: 1,\r\n        posts: [\r\n            {\r\n                id: 0,\r\n                title: \"SnowFlakes!\",\r\n                main: \"It's so beautiful\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            },\r\n            {\r\n                id: 1,\r\n                title: \"I win Scorpion\",\r\n                main: \"Just look to this punch\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            }\r\n        ],\r\n        newPostTitle: \"\",\r\n        newPostBody: \"\"\r\n    },\r\n    {\r\n        id: 2,\r\n        userId: 2,\r\n        posts: [\r\n            {\r\n                id: 0,\r\n                title: \"God!\",\r\n                main: \"Thunder god\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            },\r\n            {\r\n                id: 1,\r\n                title: \"It's me\",\r\n                main: \"Just look to the God\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            },\r\n            {\r\n                id: 1,\r\n                title: \"Alarm\",\r\n                main: \"We need to protect the Earth!\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            }\r\n        ],\r\n        newPostTitle: \"\",\r\n        newPostBody: \"\"\r\n    },\r\n    {\r\n        id: 3,\r\n        userId: 3,\r\n        posts: [\r\n            {\r\n                id: 0,\r\n                title: \"Wheres Subzero ?\",\r\n                main: \"I need him now!\",\r\n                photo: \"https://source.unsplash.com/random\"\r\n            }\r\n        ],\r\n        newPostTitle: \"\",\r\n        newPostBody: \"\"\r\n    }\r\n]\r\n\r\nexport default function postsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case UPDATE_POST_TITLE_INTO_PROFILE:\r\n            return {\r\n                ...state,\r\n                newPostTitle: action.text\r\n            }\r\n        case UPDATE_POST_BODY_INTO_PROFILE:\r\n            return {\r\n                ...state,\r\n                newPostBody: action.text\r\n            }\r\n        case ADD_POST_TO_PROFILE:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: 3,\r\n                    title: state.newPostTitle,\r\n                    main: state.newPostBody,\r\n                    photo: \"https://source.unsplash.com/random\"\r\n                }]\r\n            }\r\n        case GET_USER_POSTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                userId: action.userId\r\n            }\r\n        case GET_USER_POSTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                posts: postsMock.find( (posts) => (\r\n                    posts.userId == state.userId\r\n                )).posts\r\n            }\r\n        case GET_USER_POSTS_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\postsAction.js",["286"],"import {\n    ADD_POST_TO_PROFILE,\n    UPDATE_POST_TITLE_INTO_PROFILE,\n    UPDATE_POST_BODY_INTO_PROFILE,\n    GET_USER_POSTS_REQUEST,\n    GET_USER_POSTS_SUCCESS,\n    GET_USER_POSTS_ERROR\n}\n    from './actionTypes'\n\nimport {profilesAPI} from '../../DAL/api'\n\nexport function addPost() {\n    return {\n        type: ADD_POST_TO_PROFILE\n    }\n}\n\nexport function updatePostBody(text) {\n    return {\n        type: UPDATE_POST_BODY_INTO_PROFILE,\n        text: text\n    }\n}\n\nexport function updatePostTitle(text) {\n    return {\n        type: UPDATE_POST_TITLE_INTO_PROFILE,\n        text: text\n    }\n}\n\nexport function requestUserPosts(userId) {\n    return {\n        type: GET_USER_POSTS_REQUEST,\n        userId: userId\n    }\n}\n\nexport function receiveUserPosts() {\n    return {\n        type: GET_USER_POSTS_SUCCESS,\n    }\n}\n\nexport function errorUserPosts() {\n    return {\n        type: GET_USER_POSTS_ERROR,\n    }\n}\n\nexport function getUserPosts(userId) {\n    return (dispatch) => {\n        dispatch(requestUserPosts(userId))\n\n        dispatch(receiveUserPosts())\n    }\n}\n\n\n//��������� ������\n\n/*export function getProfile(id) {\n    return (dispatch) => {\n        dispatch(requestProfile(id))\n\n        profilesAPI.getProfile().then(data => {\n            dispatch(receiveProfile(data))\n        }).catch(error => {\n            dispatch(errorProfile(error))\n        })\n    }\n}*/\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\profilesMock.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\actions\\friendsAction.js",["287"],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\friendsReducer.js",["288","289"],"import {\r\n    GET_FRIENDS_REQUEST,\r\n    GET_FRIENDS_SUCCESS,\r\n    GET_FRIENDS_ERROR,\r\n\r\n} from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    currentUserId: null,\r\n    friends: []\r\n}\r\n\r\nlet friendsMock = [\r\n    {\r\n        userId:0,\r\n        friends: [\r\n            {\r\n                userId:1\r\n            },\r\n            {\r\n                userId:2\r\n            },\r\n            ,\r\n            {\r\n                userId:3\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        userId: 1,\r\n        friends: [\r\n            {\r\n                userId: 0\r\n            },\r\n            {\r\n                userId: 2\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        userId :2,\r\n        friends: [\r\n            {\r\n                userId: 0\r\n            },\r\n            {\r\n                userId: 1\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        userId: 3,\r\n        friends: [\r\n            {\r\n                userId: 0\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nexport default function friendsReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_FRIENDS_REQUEST:\r\n            return {\r\n                ...state,\r\n                currentUserId: action.userId\r\n            }\r\n        case GET_FRIENDS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                friends: friendsMock.find((friend) => (\r\n                    friend.userId == state.currentUserId\r\n                )).friends\r\n            }\r\n        case GET_FRIENDS_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\Redux\\reducers\\informatorReducer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\containers\\FriendsContainer.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\components\\Friends\\Friends.js",["290","291"],"import React from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Grid, Typography, Avatar,  Badge, MenuItem } from '@material-ui/core';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    linkText: {\r\n        textDecoration: \"none\",\r\n        color: \"black\"\r\n    }\r\n});\r\n\r\nconst Friends = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const onPostTitle = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostTitle(text)\r\n    }\r\n\r\n    const onPostBody = (e) => {\r\n        let text = e.target.value\r\n        props.updatePostBody(text)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <Grid direction=\"column\" container>\r\n                    {props.friends.map((friend) => (\r\n                        <NavLink to={\"/profile/\" + friend.id} className={classes.linkText}>\r\n                            <MenuItem>\r\n                                <Badge>\r\n                                    <Avatar alt={friend.name} src={friend.photo} />\r\n                                </Badge>\r\n                                <Badge>\r\n                                    <Typography> {friend.name} </Typography>\r\n                                </Badge>\r\n                                <Badge>\r\n                                    <Typography> {friend.state}</Typography>\r\n                                </Badge>\r\n                            </MenuItem>\r\n                        </NavLink>\r\n                    ))}\r\n                </Grid>\r\n            </>\r\n        )\r\n}\r\n\r\n/*Ingredient.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ingredientsInRecipe: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            countIngredient: PropTypes.string.isRequired,\r\n            recipeId: PropTypes.number.isRequired,\r\n            ingredientId: PropTypes.number.isRequired\r\n        }).isRequired\r\n    ).isRequired\r\n    //id: PropTypes.number.isRequired,\r\n    //getIngredient: PropTypes.func.isRequired\r\n}*/\r\n\r\nexport default Friends;\r\n","D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\hoc\\withAuthUser.js",[],"D:\\dev\\BookRecipes\\BookRecipes.WebApi\\client\\src\\hoc\\withFriends.js",[],{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","severity":1,"message":"297","line":2,"column":10,"nodeType":"298","messageId":"299","endLine":2,"endColumn":24},{"ruleId":"296","severity":1,"message":"300","line":2,"column":26,"nodeType":"298","messageId":"299","endLine":2,"endColumn":39},{"ruleId":"296","severity":1,"message":"301","line":2,"column":8,"nodeType":"298","messageId":"299","endLine":2,"endColumn":14},{"ruleId":"296","severity":1,"message":"302","line":4,"column":8,"nodeType":"298","messageId":"299","endLine":4,"endColumn":15},{"ruleId":"303","severity":1,"message":"304","line":8,"column":5,"nodeType":"305","messageId":"306","endLine":11,"endColumn":6},{"ruleId":"307","severity":1,"message":"308","line":33,"column":64,"nodeType":"309","messageId":"310","endLine":33,"endColumn":66},{"ruleId":"296","severity":1,"message":"311","line":4,"column":10,"nodeType":"298","messageId":"299","endLine":4,"endColumn":14},{"ruleId":"296","severity":1,"message":"312","line":4,"column":16,"nodeType":"298","messageId":"299","endLine":4,"endColumn":22},{"ruleId":"303","severity":1,"message":"304","line":20,"column":5,"nodeType":"305","messageId":"306","endLine":23,"endColumn":6},{"ruleId":"296","severity":1,"message":"313","line":68,"column":7,"nodeType":"298","messageId":"299","endLine":68,"endColumn":25},{"ruleId":"296","severity":1,"message":"314","line":3,"column":16,"nodeType":"298","messageId":"299","endLine":3,"endColumn":21},{"ruleId":"296","severity":1,"message":"312","line":3,"column":23,"nodeType":"298","messageId":"299","endLine":3,"endColumn":29},{"ruleId":"296","severity":1,"message":"315","line":3,"column":31,"nodeType":"298","messageId":"299","endLine":3,"endColumn":39},{"ruleId":"296","severity":1,"message":"316","line":21,"column":11,"nodeType":"298","messageId":"299","endLine":21,"endColumn":18},{"ruleId":"296","severity":1,"message":"316","line":56,"column":11,"nodeType":"298","messageId":"299","endLine":56,"endColumn":18},{"ruleId":"296","severity":1,"message":"317","line":27,"column":7,"nodeType":"298","messageId":"299","endLine":27,"endColumn":18},{"ruleId":"296","severity":1,"message":"318","line":8,"column":9,"nodeType":"298","messageId":"299","endLine":8,"endColumn":20},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"323"},{"ruleId":"324","severity":1,"message":"325","line":27,"column":63,"nodeType":"326","messageId":"322","endLine":27,"endColumn":65},{"ruleId":"324","severity":1,"message":"325","line":34,"column":64,"nodeType":"326","messageId":"322","endLine":34,"endColumn":66},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"327"},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"328"},{"ruleId":"296","severity":1,"message":"329","line":5,"column":16,"nodeType":"298","messageId":"299","endLine":5,"endColumn":21},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"330"},{"ruleId":"296","severity":1,"message":"318","line":7,"column":9,"nodeType":"298","messageId":"299","endLine":7,"endColumn":20},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"331"},{"ruleId":"296","severity":1,"message":"332","line":45,"column":11,"nodeType":"298","messageId":"299","endLine":45,"endColumn":22},{"ruleId":"296","severity":1,"message":"333","line":50,"column":11,"nodeType":"298","messageId":"299","endLine":50,"endColumn":21},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"334"},{"ruleId":"296","severity":1,"message":"316","line":26,"column":11,"nodeType":"298","messageId":"299","endLine":26,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"335"},{"ruleId":"296","severity":1,"message":"336","line":5,"column":28,"nodeType":"298","messageId":"299","endLine":5,"endColumn":34},{"ruleId":"296","severity":1,"message":"337","line":5,"column":36,"nodeType":"298","messageId":"299","endLine":5,"endColumn":40},{"ruleId":"296","severity":1,"message":"338","line":5,"column":42,"nodeType":"298","messageId":"299","endLine":5,"endColumn":51},{"ruleId":"296","severity":1,"message":"339","line":5,"column":53,"nodeType":"298","messageId":"299","endLine":5,"endColumn":69},{"ruleId":"296","severity":1,"message":"340","line":5,"column":71,"nodeType":"298","messageId":"299","endLine":5,"endColumn":87},{"ruleId":"296","severity":1,"message":"312","line":5,"column":89,"nodeType":"298","messageId":"299","endLine":5,"endColumn":95},{"ruleId":"296","severity":1,"message":"314","line":5,"column":97,"nodeType":"298","messageId":"299","endLine":5,"endColumn":102},{"ruleId":"296","severity":1,"message":"341","line":5,"column":104,"nodeType":"298","messageId":"299","endLine":5,"endColumn":114},{"ruleId":"296","severity":1,"message":"316","line":21,"column":11,"nodeType":"298","messageId":"299","endLine":21,"endColumn":18},{"ruleId":"296","severity":1,"message":"332","line":23,"column":11,"nodeType":"298","messageId":"299","endLine":23,"endColumn":22},{"ruleId":"296","severity":1,"message":"333","line":28,"column":11,"nodeType":"298","messageId":"299","endLine":28,"endColumn":21},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"342"},{"ruleId":"296","severity":1,"message":"316","line":25,"column":11,"nodeType":"298","messageId":"299","endLine":25,"endColumn":18},{"ruleId":"296","severity":1,"message":"332","line":27,"column":11,"nodeType":"298","messageId":"299","endLine":27,"endColumn":22},{"ruleId":"296","severity":1,"message":"333","line":32,"column":11,"nodeType":"298","messageId":"299","endLine":32,"endColumn":21},{"ruleId":"343","severity":1,"message":"344","line":41,"column":29,"nodeType":"345","endLine":41,"endColumn":47},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"346"},{"ruleId":"296","severity":1,"message":"316","line":24,"column":11,"nodeType":"298","messageId":"299","endLine":24,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":1,"column":1,"nodeType":"321","messageId":"322","fix":"347"},{"ruleId":"296","severity":1,"message":"311","line":6,"column":10,"nodeType":"298","messageId":"299","endLine":6,"endColumn":14},{"ruleId":"296","severity":1,"message":"329","line":6,"column":53,"nodeType":"298","messageId":"299","endLine":6,"endColumn":58},{"ruleId":"296","severity":1,"message":"348","line":6,"column":60,"nodeType":"298","messageId":"299","endLine":6,"endColumn":68},{"ruleId":"324","severity":1,"message":"325","line":140,"column":34,"nodeType":"326","messageId":"322","endLine":140,"endColumn":36},{"ruleId":"296","severity":1,"message":"318","line":11,"column":9,"nodeType":"298","messageId":"299","endLine":11,"endColumn":20},{"ruleId":"296","severity":1,"message":"318","line":12,"column":9,"nodeType":"298","messageId":"299","endLine":12,"endColumn":20},{"ruleId":"349","severity":1,"message":"350","line":16,"column":18,"nodeType":"351","messageId":"352","endLine":27,"endColumn":10},{"ruleId":"324","severity":1,"message":"325","line":72,"column":35,"nodeType":"326","messageId":"322","endLine":72,"endColumn":37},{"ruleId":"296","severity":1,"message":"332","line":19,"column":11,"nodeType":"298","messageId":"299","endLine":19,"endColumn":22},{"ruleId":"296","severity":1,"message":"333","line":24,"column":11,"nodeType":"298","messageId":"299","endLine":24,"endColumn":21},"no-native-reassign",["353"],"no-negated-in-lhs",["354"],"no-unused-vars","'selectFromBook' is defined but never used.","Identifier","unusedVar","'fetchFromBook' is defined but never used.","'Header' is defined but never used.","'SideBar' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Grid' is defined but never used.","'Button' is defined but never used.","'mapDispatchToProps' is assigned a value but never used.","'Input' is defined but never used.","'Checkbox' is defined but never used.","'classes' is assigned a value but never used.","'profileMock' is assigned a value but never used.","'profilesAPI' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"355","text":"356"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"range":"357","text":"356"},{"range":"358","text":"356"},"'Paper' is defined but never used.",{"range":"359","text":"356"},{"range":"360","text":"356"},"'onPostTitle' is assigned a value but never used.","'onPostBody' is assigned a value but never used.",{"range":"361","text":"356"},{"range":"362","text":"356"},"'Avatar' is defined but never used.","'Chip' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.","'IconButton' is defined but never used.",{"range":"363","text":"356"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",{"range":"364","text":"356"},{"range":"365","text":"356"},"'MenuList' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]